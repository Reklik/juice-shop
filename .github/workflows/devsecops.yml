name: DevSecOps Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  # Zadanie 1: Budowanie i testowanie aplikacji
  build-and-test:
    name: Build, Test & SCA Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies and build app
        run: npm install
      - name: Smoke Test
        run: |
          npm start &
          sleep 30
          curl -f http://localhost:3000
      - name: Run SCA scan with npm audit
        run: npm audit --audit-level=high || true

  # Zadanie 2: Skanowanie kodu (SAST)
  sast-scan:
    name: Static Code Analysis (SAST)
    needs: build-and-test
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep:latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Run Semgrep SAST scan
        run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Zadanie 3: Skanowanie sekretów
  secrets-scan:
    name: Secrets Scan
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          extra_args: --only-verified

  # Zadanie 4: Skanowanie działającej aplikacji (DAST) - z poprawką nazwy artefaktu
  dast-scan:
    name: Dynamic Analysis (DAST)
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Start Juice Shop container
        run: docker run -d --name juice_shop_for_scan -p 3000:3000 bkimminich/juice-shop
      - name: Wait for application to start
        run: sleep 30
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:3000/'
          # POPRAWKA: Zmieniamy nazwę artefaktu na bezpieczniejszą
          artifact_name: 'zap-scan-report'
          allow_issue_writing: false

  # Zadanie 5: Skanowanie obrazu kontenera (Trivy) - NOWY ETAP
  image-scan:
    name: Container Image Scan (Trivy)
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Build a Docker image from Dockerfile
        run: docker build -t juice-shop-image-to-scan:latest .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'juice-shop-image-to-scan:latest'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'
          ignore-unfixed: true