name: DevSecOps Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  # Zadanie 1: Pozostaje bez zmian
  build-and-test:
    name: Build, Test & SCA Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies and build app
        run: npm install
      - name: Smoke Test
        run: |
          npm start &
          sleep 30
          curl -f http://localhost:3000
      - name: Run SCA scan with npm audit
        run: npm audit --audit-level=high || true

  # Zadanie 2: Skanowanie SAST - teraz w 100% zgodne z dokumentacją
  sast-scan:
    name: Static Code Analysis (SAST)
    needs: build-and-test
    runs-on: ubuntu-latest
    
    # KROK 1: Uruchamiamy całe zadanie wewnątrz kontenera Semgrep
    container:
      image: semgrep/semgrep:latest # Używamy oficjalnego obrazu

    steps:
      # Krok 2: Pobieramy kod DO kontenera
      - name: Checkout repository code
        uses: actions/checkout@v4

      # Krok 3: Uruchamiamy komendę semgrep ci wewnątrz kontenera
      - name: Run Semgrep SAST scan
        run: semgrep ci
        env:
          # Przekazujemy nasz token API do kontenera
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  secrets-scan:
    name: Secrets Scan
    needs: build-and-test # Uruchom po zadaniu 1, może działać równolegle z SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4
        # Musimy pobrać pełną historię, aby skaner mógł porównać zmiany
        with:
          fetch-depth: 0 

      - name: Run TruffleHog secrets scan
        # Używamy oficjalnej akcji od TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          # Skanuj tylko zmiany od ostatniego pusha - bardzo szybkie
          base: ${{ github.event.before }}
          head: ${{ github.sha }}
          # Dodatkowe flagi dla lepszych wyników
          extra_args: --only-verified
        continue-on-error: true
        
  dast-scan:
    name: Dynamic App Scan (DAST)
    # Uruchom to zadanie, gdy pierwszy etap się powiedzie
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # Nie potrzebujemy tutaj kodu, bo akcja sama pobierze gotowy obraz Docker
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          # Ta akcja jest niesamowita - sama pobierze i uruchomi 
          # najnowszy, publiczny obraz Docker z Juice Shopem
          docker_name: 'bkimminich/juice-shop'
          
          # Podajemy jej, jaki adres ma atakować po uruchomieniu kontenera
          target: 'http://localhost:3000'
          
          # Możemy określić, żeby pipeline nie padał, gdy znajdzie błędy,
          # tylko je raportował. Ustawimy na 'true' na końcu. Na razie 'false'.
          fail_action: false